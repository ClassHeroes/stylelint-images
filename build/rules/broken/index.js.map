{"version":3,"sources":["../../../src/rules/broken/index.js"],"names":["brokenRule","ruleName","messages","ruleMessages","unexpected","imageURL","enabled","root","result","validOptions","validateOptions","actual","possible","list","checkIfImagesExists","then","reportBrokenImages","results","checkList","map","checkIfImageExists","Promise","all","listItem","url","node","source","input","file","catch","error","response","status","filter","resultItem","forEach","report","message"],"mappings":";;;;;;kBAQwBA,U;;AARxB;;AACA;;AAEO,IAAMC,8BAAW,sBAAU,QAAV,CAAjB;AACA,IAAMC,8BAAW,iBAAMC,YAAN,CAAmBF,QAAnB,EAA6B;AACnDG,cAAY;AAAA,WAAa,4BAA2BC,QAAS,GAAjD;AAAA;AADuC,CAA7B,CAAjB;;AAIQ,SAASL,UAAT,CAAoBM,OAApB,EAA6B;AAC1C,SAAO,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACvB,QAAMC,eAAe,iBAAMC,eAAN,CAAsBF,MAAtB,EAA8BP,QAA9B,EAAwC;AAC3DU,cAAQL,OADmD;AAE3DM,gBAAU,CAAC,IAAD,EAAO,KAAP;AAFiD,KAAxC,CAArB;;AAKA,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAMI,OAAO,6CAAiCN,IAAjC,CAAb;;AAEA,WAAOO,oBAAoBD,IAApB,EAA0BL,MAA1B,EACJO,IADI,CACC;AAAA,aAAWC,mBAAmBC,OAAnB,EAA4BT,MAA5B,CAAX;AAAA,KADD,CAAP;AAED,GAdD;AAeD;;AAED,SAASM,mBAAT,CAA6BD,IAA7B,EAAmC;AACjC,MAAMK,YAAYL,KAAKM,GAAL,CAASC,kBAAT,CAAlB;;AAEA,SAAOC,QAAQC,GAAR,CAAYJ,SAAZ,CAAP;AACD;;AAED,SAASE,kBAAT,CAA4BG,QAA5B,EAAsC;AACpC,SAAO,qBAASA,SAASC,GAAlB,EAAuBD,SAASE,IAAT,CAAcC,MAAd,CAAqBC,KAArB,CAA2BC,IAAlD,EACJb,IADI,CACC,YAAM,CAAE,CADT,EAEJc,KAFI,CAEE,UAACC,KAAD,EAAW;AAChB,QAAIA,SAASA,MAAMC,QAAf,IAA2BD,MAAMC,QAAN,CAAeC,MAAf,KAA0B,GAAzD,EAA8D;AAC5D,aAAOT,QAAP;AACD;;AAED,WAAO,IAAP;AACD,GARI,CAAP;AASD;;AAED,SAASP,kBAAT,CAA4BC,OAA5B,EAAqCT,MAArC,EAA6C;AAC3CS,UACGgB,MADH,CACU;AAAA,WAAc,CAAC,CAACC,UAAhB;AAAA,GADV,EAEGC,OAFH,CAEW,gBAAmB;AAAA,QAAhBV,IAAgB,QAAhBA,IAAgB;AAAA,QAAVD,GAAU,QAAVA,GAAU;;AAC1B,qBAAMY,MAAN,CAAa,EAAEC,SAASnC,SAASE,UAAT,CAAoBoB,GAApB,CAAX,EAAqCC,IAArC,EAA2CjB,MAA3C,EAAmDP,QAAnD,EAAb;AACD,GAJH;AAKD","file":"index.js","sourcesContent":["import { utils } from 'stylelint';\nimport { namespace, generateListOfImagesURLsAndNodes, getImage } from '../../utils';\n\nexport const ruleName = namespace('broken');\nexport const messages = utils.ruleMessages(ruleName, {\n  unexpected: imageURL => `Unexpected broken image \"${imageURL}\"`\n});\n\nexport default function brokenRule(enabled) {\n  return (root, result) => {\n    const validOptions = utils.validateOptions(result, ruleName, {\n      actual: enabled,\n      possible: [true, false]\n    });\n\n    if (!validOptions) {\n      return null;\n    }\n\n    const list = generateListOfImagesURLsAndNodes(root);\n\n    return checkIfImagesExists(list, result)\n      .then(results => reportBrokenImages(results, result));\n  };\n}\n\nfunction checkIfImagesExists(list) {\n  const checkList = list.map(checkIfImageExists);\n\n  return Promise.all(checkList);\n}\n\nfunction checkIfImageExists(listItem) {\n  return getImage(listItem.url, listItem.node.source.input.file)\n    .then(() => {})\n    .catch((error) => {\n      if (error && error.response && error.response.status === 404) {\n        return listItem;\n      }\n\n      return null;\n    });\n}\n\nfunction reportBrokenImages(results, result) {\n  results\n    .filter(resultItem => !!resultItem)\n    .forEach(({ node, url }) => {\n      utils.report({ message: messages.unexpected(url), node, result, ruleName });\n    });\n}\n"]}