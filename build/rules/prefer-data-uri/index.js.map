{"version":3,"sources":["../../../src/rules/prefer-data-uri/index.js"],"names":["ruleDataURI","ruleName","messages","ruleMessages","expected","imageURL","limitBytes","root","result","validOptions","validateOptions","actual","possible","list","checkImagesSizes","then","reportImagesWithSizeGreaterThan","results","checkList","map","getImageAndSize","Promise","all","listItem","url","bytesSize","response","data","length","catch","filter","resultItem","forEach","node","report","message"],"mappings":";;;;;;;;;kBASwBA,W;;AATxB;;AACA;;AACA;;AAEO,IAAMC,8BAAW,sBAAU,iBAAV,CAAjB;AACA,IAAMC,8BAAW,iBAAMC,YAAN,CAAmBF,QAAnB,EAA6B;AACnDG,YAAU;AAAA,WAAa,mBAAkBC,QAAS,sBAAxC;AAAA;AADyC,CAA7B,CAAjB;;AAIQ,SAASL,WAAT,CAAqBM,UAArB,EAAiC;AAC9C,SAAO,UAACC,IAAD,EAAOC,MAAP,EAAkB;AACvB,QAAMC,eAAe,iBAAMC,eAAN,CAAsBF,MAAtB,EAA8BP,QAA9B,EAAwC;AAC3DU,cAAQL,UADmD;AAE3DM,gBAAU;AAFiD,KAAxC,CAArB;;AAKA,QAAI,CAACH,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,QAAMI,OAAO,6CAAiCN,IAAjC,CAAb;;AAEA,WAAOO,iBAAiBD,IAAjB,EAAuBL,MAAvB,EAA+BO,IAA/B,CAAoC;AAAA,aACzCC,gCAAgCC,OAAhC,EAAyCT,MAAzC,EAAiDF,UAAjD,CADyC;AAAA,KAApC,CAAP;AAGD,GAfD;AAgBD;;AAED,SAASQ,gBAAT,CAA0BD,IAA1B,EAAgC;AAC9B,MAAMK,YAAYL,KAAKM,GAAL,CAASC,eAAT,CAAlB;;AAEA,SAAOC,QAAQC,GAAR,CAAYJ,SAAZ,CAAP;AACD;;AAED,SAASE,eAAT,CAAyBG,QAAzB,EAAmC;AACjC,SAAO,qBAASA,SAASC,GAAlB,EACJT,IADI,CACC;AAAA,wBACDQ,QADC;AAEJE,iBAAWC,SAASC,IAAT,CAAcC;AAFrB;AAAA,GADD,EAKJC,KALI,CAKE,YAAM,CAAE,CALV,CAAP;AAMD;;AAED,SAASb,+BAAT,CAAyCC,OAAzC,EAAkDT,MAAlD,EAA0DF,UAA1D,EAAsE;AACpEW,UAAQa,MAAR,CAAe;AAAA,WAAc,CAAC,CAACC,UAAhB;AAAA,GAAf,EAA2CC,OAA3C,CAAmD,gBAI7C;AAAA,QAHJC,IAGI,QAHJA,IAGI;AAAA,QAFJT,GAEI,QAFJA,GAEI;AAAA,QADJC,SACI,QADJA,SACI;;AACJ,QAAIA,YAAYnB,UAAhB,EAA4B;AAC1B,uBAAM4B,MAAN,CAAa,EAAEC,SAASjC,SAASE,QAAT,CAAkBoB,GAAlB,CAAX,EAAmCS,IAAnC,EAAyCzB,MAAzC,EAAiDP,QAAjD,EAAb;AACD;AACF,GARD;AASD","file":"index.js","sourcesContent":["import { utils } from 'stylelint';\nimport { isNumber } from 'lodash';\nimport { namespace, generateListOfImagesURLsAndNodes, getImage } from '../../utils';\n\nexport const ruleName = namespace('prefer-data-uri');\nexport const messages = utils.ruleMessages(ruleName, {\n  expected: imageURL => `Expected image \"${imageURL}\" to be as data-URI.`\n});\n\nexport default function ruleDataURI(limitBytes) {\n  return (root, result) => {\n    const validOptions = utils.validateOptions(result, ruleName, {\n      actual: limitBytes,\n      possible: [isNumber]\n    });\n\n    if (!validOptions) {\n      return null;\n    }\n\n    const list = generateListOfImagesURLsAndNodes(root);\n\n    return checkImagesSizes(list, result).then(results =>\n      reportImagesWithSizeGreaterThan(results, result, limitBytes)\n    );\n  };\n}\n\nfunction checkImagesSizes(list) {\n  const checkList = list.map(getImageAndSize);\n\n  return Promise.all(checkList);\n}\n\nfunction getImageAndSize(listItem) {\n  return getImage(listItem.url)\n    .then(response => ({\n      ...listItem,\n      bytesSize: response.data.length\n    }))\n    .catch(() => {});\n}\n\nfunction reportImagesWithSizeGreaterThan(results, result, limitBytes) {\n  results.filter(resultItem => !!resultItem).forEach(({\n    node,\n    url,\n    bytesSize\n  }) => {\n    if (bytesSize < limitBytes) {\n      utils.report({ message: messages.expected(url), node, result, ruleName });\n    }\n  });\n}\n"]}