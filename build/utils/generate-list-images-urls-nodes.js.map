{"version":3,"sources":["../../src/utils/generate-list-images-urls-nodes.js"],"names":["generateListOfImagesURLsAndNodes","URL_VALUE_PATTERNS","URL_PROPERTY_PATTERN","root","list","walkDecls","node","newList","generateList","length","concat","filter","valuePattern","test","value","map","generateItems","URLs","getURLs","URLsAndNodes","url","v","match","replace","splitURLs","split","trim"],"mappings":";;;;;kBAUwBA,gC;AAVxB;AACA;AACA,IAAMC,qBAAqB,CACzB,uCADyB,EAEzB,kDAFyB,CAA3B;AAIA;AACA;AACA,IAAMC,uBAAuB,6CAA7B;;AAEe,SAASF,gCAAT,CAA0CG,IAA1C,EAAgD;AAC7D,MAAIC,OAAO,EAAX;;AAEAD,OAAKE,SAAL,CAAeH,oBAAf,EAAqC,UAACI,IAAD,EAAU;AAC7C,QAAMC,UAAUC,aAAaF,IAAb,CAAhB;;AAEA,QAAIC,WAAWA,QAAQE,MAAR,GAAiB,CAAhC,EAAmC;AACjCL,aAAOA,KAAKM,MAAL,CAAYH,OAAZ,CAAP;AACD;AACF,GAND;;AAQA,SAAOH,IAAP;AACD;;AAED,SAASI,YAAT,CAAsBF,IAAtB,EAA4B;AAC1B,SAAOL,mBACJU,MADI,CACG;AAAA,WAAgBC,aAAaC,IAAb,CAAkBP,KAAKQ,KAAvB,CAAhB;AAAA,GADH,EAEJC,GAFI,CAEA;AAAA,WAAgBC,cAAcV,IAAd,EAAoBM,YAApB,CAAhB;AAAA,GAFA,EAEmD,CAFnD,CAAP;AAGD;;AAED,SAASI,aAAT,CAAuBV,IAAvB,EAA6BM,YAA7B,EAA2C;AACzC,MAAMK,OAAOC,QAAQZ,IAAR,EAAcM,YAAd,CAAb;AACA,MAAMO,eAAeF,KAAKF,GAAL,CAAS;AAAA,WAAQ,EAAEK,GAAF,EAAOd,IAAP,EAAR;AAAA,GAAT,CAArB;;AAEA,SAAOa,YAAP;AACD;;AAED,SAASD,OAAT,CAAiBZ,IAAjB,EAAuBM,YAAvB,EAAqC;AACnC,MAAMS,IAAIf,KAAKQ,KAAL,CAAWQ,KAAX,CAAiBV,YAAjB,EAA+B,CAA/B,CAAV;AACA,MAAMK,OAAOI,EAAEE,OAAF,CAAUX,YAAV,EAAwB,IAAxB,CAAb;AACA,MAAMY,YAAYP,KAAKQ,KAAL,CAAW,GAAX,EAAgBV,GAAhB,CAAoB;AAAA,WAAOK,IAAIM,IAAJ,EAAP;AAAA,GAApB,CAAlB;;AAEA,SAAOF,SAAP;AACD","file":"generate-list-images-urls-nodes.js","sourcesContent":["// CSS functions that can have an URL image\n// From: https://github.com/postcss/postcss-url/blob/a9d1d4307b061210b1e051d1c2e9c481ca6afbf5/index.js#L26-L29\nconst URL_VALUE_PATTERNS = [\n  /(url\\(\\s*['\"]?)([^\"')]+)([\"']?\\s*\\))/g,\n  /(AlphaImageLoader\\(\\s*src=['\"]?)([^\"')]+)([\"'])/g\n];\n// CSS properties that can have an URL image\n// From: https://github.com/bezoerb/postcss-image-inliner/blob/8b825acebace2f1567195b49e47c0d454de4a3ae/index.js#L69\nconst URL_PROPERTY_PATTERN = /^(background(?:-image)?)|(content)|(cursor)/;\n\nexport default function generateListOfImagesURLsAndNodes(root) {\n  let list = [];\n\n  root.walkDecls(URL_PROPERTY_PATTERN, (node) => {\n    const newList = generateList(node);\n\n    if (newList && newList.length > 0) {\n      list = list.concat(newList);\n    }\n  });\n\n  return list;\n}\n\nfunction generateList(node) {\n  return URL_VALUE_PATTERNS\n    .filter(valuePattern => valuePattern.test(node.value))\n    .map(valuePattern => generateItems(node, valuePattern))[0];\n}\n\nfunction generateItems(node, valuePattern) {\n  const URLs = getURLs(node, valuePattern);\n  const URLsAndNodes = URLs.map(url => ({ url, node }));\n\n  return URLsAndNodes;\n}\n\nfunction getURLs(node, valuePattern) {\n  const v = node.value.match(valuePattern)[0];\n  const URLs = v.replace(valuePattern, '$2');\n  const splitURLs = URLs.split(',').map(url => url.trim());\n\n  return splitURLs;\n}\n"]}