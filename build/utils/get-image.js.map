{"version":3,"sources":["../../src/utils/get-image.js"],"names":["getImage","path","require","fs","cacheImageResults","Map","REMOTE_URL","url","source","fileExistsCheck","testPath","match","join","dirname","localFileExists","remoteFileExists","has","preservePromiseMethods","get","then","response","set","catch","error","result","Error","Promise","reject","resolve","fileURL","responseType","filePath","stat","status"],"mappings":";;;;;kBAWwBA,Q;;AAXxB;;;;;;AAEA,IAAMC,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;AAEA,IAAME,oBAAoB,IAAIC,GAAJ,EAA1B;;AAEA;AACA;AACA,IAAMC,aAAa,oBAAnB;;AAEe,SAASN,QAAT,CAAkBO,GAAlB,EAAuBC,MAAvB,EAA+B;AAC5C,MAAIC,kBAAkB,IAAtB;AACA,MAAIC,WAAW,IAAf;;AAEA,MAAI,CAACH,IAAII,KAAJ,CAAUL,UAAV,CAAL,EAA4B;AAC1BI,eAAWT,KAAKW,IAAL,CAAUX,KAAKY,OAAL,CAAaL,MAAb,CAAV,EAAgCD,GAAhC,CAAX;AACAE,sBAAkBK,eAAlB;AACD,GAHD,MAGO;AACLJ,eAAWH,GAAX;AACAE,sBAAkBM,gBAAlB;AACD;;AAED,MAAIX,kBAAkBY,GAAlB,CAAsBN,QAAtB,CAAJ,EAAqC;AACnC,WAAOO,uBAAuBb,kBAAkBc,GAAlB,CAAsBR,QAAtB,CAAvB,CAAP;AACD;;AAED,SAAOD,gBAAgBC,QAAhB,EACJS,IADI,CACC,UAACC,QAAD,EAAc;AAClBhB,sBAAkBiB,GAAlB,CAAsBX,QAAtB,EAAgCU,QAAhC;AACA,WAAOA,QAAP;AACD,GAJI,EAKJE,KALI,CAKE,UAACC,KAAD,EAAW;AAChBnB,sBAAkBiB,GAAlB,CAAsBX,QAAtB,EAAgCa,KAAhC;AACA,WAAOA,KAAP;AACD,GARI,EASJJ,IATI,CASCF,sBATD,CAAP;AAUD;;AAED,SAASA,sBAAT,CAAgCO,MAAhC,EAAwC;AACtC,MAAIA,kBAAkBC,KAAtB,EAA6B;AAC3B,WAAOC,QAAQC,MAAR,CAAeH,MAAf,CAAP;AACD;;AAED,SAAOE,QAAQE,OAAR,CAAgBJ,MAAhB,CAAP;AACD;;AAED,SAAST,gBAAT,CAA0Bc,OAA1B,EAAmC;AACjC,SAAO,gBAAMX,GAAN,CAAUW,OAAV,EAAmB,EAAEC,cAAc,aAAhB,EAAnB,CAAP;AACD;;AAED,SAAShB,eAAT,CAAyBiB,QAAzB,EAAmC;AACjC,SAAO,IAAIL,OAAJ,CAAY,UAACE,OAAD,EAAUD,MAAV,EAAqB;AACtCxB,OAAG6B,IAAH,CAAQD,QAAR,EAAkB,UAACR,KAAD,EAAQS,IAAR,EAAiB;AACjC,UAAIT,KAAJ,EAAW;AACTA,cAAMH,QAAN,GAAiB,EAAEa,QAAQ,GAAV,EAAjB;AACAN,eAAOJ,KAAP;AACD,OAHD,MAGO;AACLK,gBAAQI,IAAR;AACD;AACF,KAPD;AAQD,GATM,CAAP;AAUD","file":"get-image.js","sourcesContent":["import axios from 'axios';\n\nconst path = require('path');\nconst fs = require('fs');\n\nconst cacheImageResults = new Map();\n\n// Remote URLs\n// From: http://stackoverflow.com/a/19709846/4709891\nconst REMOTE_URL = /^(?:[a-z]+:)?\\/\\//i;\n\nexport default function getImage(url, source) {\n  let fileExistsCheck = null;\n  let testPath = null;\n\n  if (!url.match(REMOTE_URL)) {\n    testPath = path.join(path.dirname(source), url);\n    fileExistsCheck = localFileExists;\n  } else {\n    testPath = url;\n    fileExistsCheck = remoteFileExists;\n  }\n\n  if (cacheImageResults.has(testPath)) {\n    return preservePromiseMethods(cacheImageResults.get(testPath));\n  }\n\n  return fileExistsCheck(testPath)\n    .then((response) => {\n      cacheImageResults.set(testPath, response);\n      return response;\n    })\n    .catch((error) => {\n      cacheImageResults.set(testPath, error);\n      return error;\n    })\n    .then(preservePromiseMethods);\n}\n\nfunction preservePromiseMethods(result) {\n  if (result instanceof Error) {\n    return Promise.reject(result);\n  }\n\n  return Promise.resolve(result);\n}\n\nfunction remoteFileExists(fileURL) {\n  return axios.get(fileURL, { responseType: 'arraybuffer' });\n}\n\nfunction localFileExists(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.stat(filePath, (error, stat) => {\n      if (error) {\n        error.response = { status: 404 };\n        reject(error);\n      } else {\n        resolve(stat);\n      }\n    });\n  });\n}\n"]}